name: Code Quality

on:
  push:
    branches: [ main, develop, master, 'feature/*' ]
  pull_request:
    branches: [ main, develop, master ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  # Static analysis with multiple tools
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          cppcheck \
          clang-tools \
          valgrind \
          splint

    - name: Run cppcheck
      run: |
        cppcheck \
          --enable=all \
          --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --inline-suppr \
          --std=c99 \
          --xml \
          --output-file=cppcheck-results.xml \
          *.c *.h examples/*.c || true
        
        # Also run with text output for logs
        cppcheck \
          --enable=all \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --inline-suppr \
          --std=c99 \
          *.c *.h examples/*.c

    - name: Run clang-tidy
      run: |
        mkdir build-analysis
        cd build-analysis
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBUILD_EXAMPLES=ON \
          -DENABLE_LINUX_SUPPORT=ON \
          ..
        
        # Run clang-tidy on source files
        clang-tidy \
          --config-file=../.clang-tidy \
          ../xensiv_bgt60trxx.c \
          ../xensiv_bgt60trxx_linux.c \
          ../examples/*.c \
          -- -I../. || true

    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-results
        path: |
          cppcheck-results.xml
          build-analysis/compile_commands.json

  # Memory leak detection
  memory-analysis:
    name: Memory Analysis
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          valgrind

    - name: Build with debug symbols
      run: |
        mkdir build-memory
        cd build-memory
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_C_FLAGS="-g -O0" \
          -DBUILD_EXAMPLES=ON \
          -DENABLE_LINUX_SUPPORT=ON \
          ..
        make -j$(nproc)

    - name: Run integration test with Valgrind
      run: |
        cd build-memory
        gcc -g -O0 -I../. -DXENSIV_BGT60TRXX_LINUX_SUPPORT -o test_integration ../test_integration.c libxensiv_bgt60trxx.a -lm -lpthread
        valgrind \
          --tool=memcheck \
          --leak-check=full \
          --show-leak-kinds=all \
          --track-origins=yes \
          --error-exitcode=1 \
          --xml=yes \
          --xml-file=valgrind-results.xml \
          ./test_integration

    - name: Upload memory analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: memory-analysis-results
        path: build-memory/valgrind-results.xml

  # Code formatting check
  formatting:
    name: Code Formatting
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check code formatting
      run: |
        # Check if .clang-format exists, if not create a basic one
        if [ ! -f .clang-format ]; then
          cat > .clang-format << 'EOF'
        BasedOnStyle: LLVM
        IndentWidth: 4
        TabWidth: 4
        UseTab: Never
        ColumnLimit: 100
        AllowShortFunctionsOnASingleLine: None
        AllowShortIfStatementsOnASingleLine: false
        AllowShortLoopsOnASingleLine: false
        EOF
        fi
        
        # Check formatting (dry run)
        find . -name "*.c" -o -name "*.h" | grep -v build | xargs clang-format --dry-run --Werror

  # Documentation quality
  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          doxygen \
          graphviz

    - name: Check header documentation
      run: |
        # Check that public headers have proper documentation
        python3 << 'EOF'
        import re
        import sys
        
        def check_function_docs(filename):
            with open(filename, 'r') as f:
                content = f.read()
            
            # Find function declarations
            func_pattern = r'^\s*[a-zA-Z_][a-zA-Z0-9_*\s]+\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\([^)]*\)\s*;'
            functions = re.findall(func_pattern, content, re.MULTILINE)
            
            # Check for documentation comments
            doc_pattern = r'/\*\*.*?\*/'
            docs = re.findall(doc_pattern, content, re.DOTALL)
            
            print(f"Found {len(functions)} functions and {len(docs)} doc comments in {filename}")
            return len(functions), len(docs)
        
        # Check main headers
        headers = ['xensiv_bgt60trxx.h', 'xensiv_bgt60trxx_linux.h']
        total_funcs = 0
        total_docs = 0
        
        for header in headers:
            try:
                funcs, docs = check_function_docs(header)
                total_funcs += funcs
                total_docs += docs
            except FileNotFoundError:
                print(f"Warning: {header} not found")
        
        print(f"Total: {total_funcs} functions, {total_docs} documentation blocks")
        
        # We expect at least some documentation
        if total_docs == 0 and total_funcs > 0:
            print("Warning: No documentation found for public functions")
            sys.exit(1)
        EOF

    - name: Generate Doxygen documentation
      run: |
        # Create basic Doxyfile if it doesn't exist
        if [ ! -f Doxyfile ]; then
          doxygen -g
          # Configure for our project
          sed -i 's/PROJECT_NAME.*/PROJECT_NAME = "XENSIV BGT60TRxx"/' Doxyfile
          sed -i 's/INPUT.*/INPUT = . examples/' Doxyfile
          sed -i 's/RECURSIVE.*/RECURSIVE = YES/' Doxyfile
          sed -i 's/EXTRACT_ALL.*/EXTRACT_ALL = YES/' Doxyfile
          sed -i 's/GENERATE_LATEX.*/GENERATE_LATEX = NO/' Doxyfile
        fi
        
        # Generate documentation
        doxygen || true

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: doxygen-documentation
        path: html/

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install security tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config

    - name: Build with security flags
      run: |
        mkdir build-security
        cd build-security
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-Wall -Wextra -Wpedantic -Wformat=2 -Wformat-security -D_FORTIFY_SOURCE=2 -fstack-protector-strong" \
          -DBUILD_EXAMPLES=ON \
          -DENABLE_LINUX_SUPPORT=ON \
          ..
        make -j$(nproc)

    - name: Run basic security checks
      run: |
        cd build-security
        
        # Check for common security issues in binaries
        echo "Checking for stack protection..."
        readelf -s libxensiv_bgt60trxx.a | grep -q "__stack_chk" || echo "Warning: No stack protection found"
        
        # Check examples
        for example in examples/*; do
          if [ -x "$example" ]; then
            echo "Checking $example..."
            file "$example"
          fi
        done

  # License compliance
  license-check:
    name: License Check
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check license headers
      run: |
        python3 << 'EOF'
        import os
        import sys
        
        def check_license_header(filename):
            with open(filename, 'r') as f:
                content = f.read()
            
            # Check for copyright notice
            if 'Copyright' not in content[:1000]:  # Check first 1000 chars
                return False
            
            return True
        
        # Check source files
        source_files = []
        for root, dirs, files in os.walk('.'):
            # Skip build directories and .git
            dirs[:] = [d for d in dirs if not d.startswith('.') and d != 'build']
            for file in files:
                if file.endswith(('.c', '.h')) and not file.startswith('.'):
                    source_files.append(os.path.join(root, file))
        
        missing_license = []
        for file in source_files:
            if not check_license_header(file):
                missing_license.append(file)
        
        if missing_license:
            print("Files missing license headers:")
            for file in missing_license:
                print(f"  {file}")
            # Don't fail for now, just warn
            # sys.exit(1)
        else:
            print("All source files have license headers")
        EOF

    - name: Validate license files
      run: |
        # Check that required license files exist
        test -f LICENSE || (echo "LICENSE file missing" && exit 1)
        test -f EULA || (echo "EULA file missing" && exit 1)
        
        # Check that LICENSE is not empty
        test -s LICENSE || (echo "LICENSE file is empty" && exit 1)
        test -s EULA || (echo "EULA file is empty" && exit 1)
        
        echo "License files validated successfully"